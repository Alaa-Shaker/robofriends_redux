{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","CardComponent","robots","map","item","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","prpos","style","overflowY","border","height","margin","children","App","this","onrequestRobots","searchField","onsearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3d0d3882.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = (props)=>{\r\n\r\n\treturn(\r\n\t\t<div className=\"tc mw5   grad dib br3 pa3 ma2 grow bw2 shadow-5 hover-bg-light-blue bg-light-green\">\r\n\t\t<img alt='robot' className=\"br-100 h4 w4  ba b--black-05 pa2\" src={`https://robohash.org/${props.id}?set=set1&&200*200`}/>\r\n\t\t<h2 className=\"f3 mb2\"> {props.name} </h2>\r\n\t\t<p className =\"f5 fw4 gray mt0\">{props.email} </p>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\t\t\r\n\t/*\r\n\t\treturn(\r\n\r\n\t\t<article className=\"mw5 center br3 pa3 pa4-ns mv3 no-underline bg-animate bg-white hover-bg-light-blue black grad shadow-5\">\r\n\r\n\t\t<div className=\"tc\">\r\n\t\t<img alt='robot' className=\"br-100 h4 w4  ba b--black-05 pa2\" src={`https://robohash.org/${id}?200*200`}/>\r\n\t\t<h2 className=\"f3 mb2\"> {name} </h2>\r\n\t\t<p className =\"f5 fw4 gray mt0\">{email} </p>\r\n\t\t</div>\r\n\r\n\t\t</article>\r\n\t\t);\r\n\t*/\r\n\t\r\n}\r\n\r\nexport default  Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardList.css';  //not needed cause us library\r\n\r\nconst CardList =({robots})=>{\r\n\tconst CardComponent=robots.map((item,index)=>{\r\n\t\treturn(\r\n\t\t\t<Card\r\n\t\t\t key={item.id}\r\n\t\t\t id={item.id}\r\n\t\t\t name={item.name}\r\n\t\t\t email={item.email}\r\n\t\t\t />\r\n\t\t\t);\r\n\t});\r\n\r\n\treturn(\r\n\t\t<div className=\"flex flex-wrap justify-around \">\r\n\t\t{CardComponent}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className=\"seachBox\">\r\n\t\t<input \r\n\t\tclassName=\"pa3 b--green bg-lightest-blue dim\"\r\n\t\t type=\"search\" \r\n\t\t placeholder=\"Search Robot\"\r\n\t\t onChange={searchChange} />\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(prpos)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'1px solid black' , height:'650px' , margin:'10px'}} >\r\n\t\t{prpos.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox.js'\r\nimport Scroll from '../component/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchField , requestRobots} from '../actions.js';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n\r\nconst mapStateToProps =state=>{\r\n\treturn {searchField:state.searchRobots.searchField ,\r\n\t\t\trobots:state.requestRobots.robots,\r\n\t\t\tisPending:state.requestRobots.isPending ,\r\n\t\t\terror:state.requestRobots.error}\r\n}\r\n\r\nconst mapDispatchToprops=(dispatch)=>{\r\n\treturn {onsearchChange:(event)=>dispatch(setSearchField(event.target.value)) ,\r\n\t\t\tonrequestRobots :()=>dispatch(requestRobots())}\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onrequestRobots();\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {searchField, onsearchChange , isPending , robots  } = this.props;\r\n\r\n\t\r\n\t\tconst filteredRobots=robots.filter((robot)=>{\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase()); })\r\n\r\n\t\t// console.log(\"render\");\r\n\t\tif (isPending)\r\n\t\t{\r\n\t\t\treturn(<h1 className=\"tc\"> ... Loading ...</h1>)\r\n\t\t}\r\n\t\telse{\r\n\r\n\t\t\treturn(\r\n\t\t\t<div className=\"tc\" >\r\n\t\t\t<h1 className=\"green head-style\"> Robot Friends </h1>\r\n\t\t\t<SearchBox searchChange={onsearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList robots={filteredRobots} /> \r\n\t\t\t</Scroll>\r\n\t\t\t\r\n\t\t\t</div>);\t\r\n\t\t\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToprops)(App);\r\n","import {CHANGE_SEARCH_FIELD ,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n\ttype:CHANGE_SEARCH_FIELD,\r\n\tpayload:text});\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users ')\r\n\t.then(response=>response.json())\r\n\t.then(data=> dispatch ({type : REQUEST_ROBOTS_SUCCESS , payload : data}) )\r\n\t.catch(error=>dispatch ({type:REQUEST_ROBOTS_FAILED , payload:error}) )\r\n}","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {CHANGE_SEARCH_FIELD ,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD :\r\n\t\t return Object.assign({},state,{searchField:action.payload})\r\n\t\tdefault: \r\n\t\t return state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots={\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror:''\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots , action={}) =>{\r\n\tswitch(action.type){\r\n\r\n\t\tcase REQUEST_ROBOTS_PENDING :\r\n\t\t\treturn Object.assign({},state,{isPending :true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS :\r\n\t\t\treturn Object.assign({},state,{robots:action.payload , isPending:false});\r\n\t\tcase REQUEST_ROBOTS_FAILED :\r\n\t\t\treturn Object.assign({},state,{error:action.payload , isPending:false}) ;\r\n\t\tdefault :\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App'\r\nimport 'tachyons';\r\nimport 'simple-flexbox';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {Provider} from 'react-redux';\r\nimport {createStore , applyMiddleware , combineReducers} from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {searchRobots,requestRobots} from './reducers.js'\r\n\r\nimport {createLogger} from 'redux-logger';\r\n\r\nconst logger = createLogger();\r\n\r\n\r\n\r\n\r\nconst rootReducers = combineReducers({searchRobots , requestRobots}) ;\r\n\r\n// const store = createStore(rootReducers , applyMiddleware(thunkMiddleware  ))\r\n\r\n const store = createStore(rootReducers , applyMiddleware(thunkMiddleware ,logger ));  // for apply Middleware if want\r\n\r\nReactDOM.render(\r\n\r\n\r\n  <Provider store={store} >\r\n  <App  />\r\n  </Provider>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}